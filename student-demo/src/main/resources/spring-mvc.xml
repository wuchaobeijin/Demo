<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd"
       default-lazy-init="true">
    <context:component-scan
            base-package="com.student.web" />
    <context:property-placeholder location="classpath:application.properties"/>
    <mvc:annotation-driven />

    <bean
            class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManager">
                <constructor-arg name="strategies">
                    <set>
                        <bean
                                class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
                            <constructor-arg name="mediaTypes">
                                <map>
                                    <entry key="json"
                                           value="#{T(org.springframework.http.MediaType).APPLICATION_JSON}" />
                                    <entry key="json" value="application/json" />
                                    <entry key="xml"
                                           value="#{T(org.springframework.http.MediaType).TEXT_XML}" />
                                    <entry key="htm"
                                           value="#{T(org.springframework.http.MediaType).TEXT_HTML}" />
                                </map>
                            </constructor-arg>
                        </bean>
                    </set>
                </constructor-arg>
            </bean>
        </property>
    </bean>
    <!-- 配置 BeanNameViewResolver的目的是把controller中返回的逻辑视图名“jsonView”解析成下面的MappingJackson2JsonView，来配合ContentNegotiatingViewResolver-->
    <bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
    <bean id="jsonView"
          class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"> <!-- 支持jackson2.x版本 -->
        <property name="encoding" value="UTF8" />
        <property name="extractValueFromSingleKeyModel" value="true" />
        <property name="contentType" value="application/json;charset=UTF-8" />
    </bean>

    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>
    <!--&lt;!&ndash; springmvc 处理文件上传的bean bean id 有意义，必须这么写，DispactchServlet 会根据这个id查找bean &ndash;&gt;-->
    <!--<bean id="multipartResolver"-->
          <!--class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--<property name="maxUploadSize" value="5000000" />&lt;!&ndash; 图片最大上传5M &ndash;&gt;-->
    <!--</bean>-->


</beans>